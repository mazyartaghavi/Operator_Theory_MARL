# Quantum-Inspired DDPG for MARL (10 UAVs) in Forest Surveillance
# Case Study: Exploration-Exploitation Optimization with Random Operator Theory Concepts

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import random
from collections import deque

# Environment Setup Placeholder (You should replace this with a custom forest surveillance environment)
class ForestSurveillanceEnv:
    def __init__(self, num_agents=10):
        self.num_agents = num_agents
        self.state_size = 20
        self.action_size = 2

    def reset(self):
        return np.random.rand(self.num_agents, self.state_size)

    def step(self, actions):
        next_state = np.random.rand(self.num_agents, self.state_size)
        rewards = np.random.rand(self.num_agents)
        done = np.random.choice([False, True], self.num_agents, p=[0.9, 0.1])
        return next_state, rewards, done, {}

# Actor Network
class Actor(nn.Module):
    def __init__(self, state_dim, action_dim):
        super(Actor, self).__init__()
        self.fc1 = nn.Linear(state_dim, 256)
        self.fc2 = nn.Linear(256, 256)
        self.out = nn.Linear(256, action_dim)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return torch.tanh(self.out(x))

# Critic Network
class Critic(nn.Module):
    def __init__(self, state_dim, action_dim):
        super(Critic, self).__init__()
        self.fc1 = nn.Linear(state_dim + action_dim, 256)
        self.fc2 = nn.Linear(256, 256)
        self.out = nn.Linear(256, 1)

    def forward(self, s, a):
        x = torch.cat([s, a], dim=1)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.out(x)

# Replay Buffer
class ReplayBuffer:
    def __init__(self, maxlen=100000):
        self.buffer = deque(maxlen=maxlen)

    def add(self, experience):
        self.buffer.append(experience)

    def sample(self, batch_size):
        return random.sample(self.buffer, batch_size)

# Quantum-Inspired Exploration (Amplitude Encoding Noise)
def quantum_exploration(action, scale=0.1):
    noise = torch.normal(0, scale, size=action.size())
    return action + noise

# Agent Class
class DDPGAgent:
    def __init__(self, state_dim, action_dim):
        self.actor = Actor(state_dim, action_dim)
        self.actor_target = Actor(state_dim, action_dim)
        self.critic = Critic(state_dim, action_dim)
        self.critic_target = Critic(state_dim, action_dim)

        self.actor_optimizer = optim.Adam(self.actor.parameters(), lr=1e-4)
        self.critic_optimizer = optim.Adam(self.critic.parameters(), lr=1e-3)

        self.buffer = ReplayBuffer()
        self.gamma = 0.99
        self.tau = 0.01

    def act(self, state):
        state = torch.FloatTensor(state)
        action = self.actor(state)
        return quantum_exploration(action).detach().numpy()

    def update(self, batch_size=64):
        if len(self.buffer.buffer) < batch_size:
            return
        batch = self.buffer.sample(batch_size)
        states, actions, rewards, next_states, dones = zip(*batch)

        states = torch.FloatTensor(states)
        actions = torch.FloatTensor(actions)
        rewards = torch.FloatTensor(rewards).unsqueeze(1)
        next_states = torch.FloatTensor(next_states)
        dones = torch.FloatTensor(dones).unsqueeze(1)

        # Update Critic
        next_actions = self.actor_target(next_states)
        q_targets_next = self.critic_target(next_states, next_actions)
        q_targets = rewards + self.gamma * q_targets_next * (1 - dones)
        q_expected = self.critic(states, actions)
        critic_loss = nn.MSELoss()(q_expected, q_targets.detach())
        self.critic_optimizer.zero_grad()
        critic_loss.backward()
        self.critic_optimizer.step()

        # Update Actor
        actor_loss = -self.critic(states, self.actor(states)).mean()
        self.actor_optimizer.zero_grad()
        actor_loss.backward()
        self.actor_optimizer.step()

        # Soft update
        for target_param, param in zip(self.actor_target.parameters(), self.actor.parameters()):
            target_param.data.copy_(self.tau * param.data + (1 - self.tau) * target_param.data)
        for target_param, param in zip(self.critic_target.parameters(), self.critic.parameters()):
            target_param.data.copy_(self.tau * param.data + (1 - self.tau) * target_param.data)

# Training Loop
env = ForestSurveillanceEnv()
agents = [DDPGAgent(env.state_size, env.action_size) for _ in range(env.num_agents)]

episodes = 500
for ep in range(episodes):
    state = env.reset()
    done = [False] * env.num_agents
    while not all(done):
        actions = [agents[i].act(state[i]) for i in range(env.num_agents)]
        next_state, rewards, done, _ = env.step(actions)
        for i in range(env.num_agents):
            agents[i].buffer.add((state[i], actions[i], rewards[i], next_state[i], done[i]))
            agents[i].update()
        state = next_state
    print(f"Episode {ep+1} complete")
